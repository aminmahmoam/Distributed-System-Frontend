{"remainingRequest":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aminmahmoudi/Desktop/DIT356/client 2/client/src/views/Booking.vue?vue&type=style&index=0&id=bbb6eae2&lang=css&","dependencies":[{"path":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/src/views/Booking.vue","mtime":1673261791083},{"path":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1655715156000},{"path":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/node_modules/vue-loader/lib/index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5ib29raW5nLWJveCB7Cm1hcmdpbi10b3A6IDNyZW07CmJveC1zaXppbmc6IGJvcmRlci1ib3g7CmhlaWdodDogYXV0bzsKYm9yZGVyLXJhZGl1czogMjVweDsKdGV4dC1hbGlnbjogY2VudGVyOwptYXJnaW4tbGVmdDogMzAlOwptYXJnaW4tcmlnaHQ6IDMwJTsKYmFja2dyb3VuZDogI2ZmZmZmZjsKcGFkZGluZzogNDBweDsKY29sb3I6ICM0QjZBQTc7CmJveC1zaGFkb3c6IDRweCAxMHB4IDEwcHggcmdiYSgxNDMsIDE0NSwgMTkwLCAwLjI1KTsKfQouYm9vay1idXR0b24gewpwYWRkaW5nOiAxNHB4OwpkaXNwbGF5OmlubGluZS1ibG9jazsKdGV4dC1hbGlnbjogY2VudGVyOwptYXJnaW4tdG9wOiAxcmVtOwpib3gtc2l6aW5nOiBib3JkZXItYm94OwpoZWlnaHQ6IGF1dG87CmJhY2tncm91bmQtY29sb3I6ICM3NDhGQzQ7CmNvbG9yOiAjZmZmZmZmOwpib3JkZXItcmFkaXVzOiAyM3B4OwpjdXJzb3I6IHBvaW50ZXI7CmJvcmRlcjogMnB4IHNvbGlkICM3NDhGQzQ7CmJveC1zaGFkb3c6IDBweCA0cHggNHB4IHJnYmEoMTQzLCAxNDUsIDE5MCwgMC4yNSk7Cn0KLmVkaXQtdGV4dCB7CmNvbG9yOiAjZmZmZmZmOwp9Ci5ib29rLWJ1dHRvbjpob3ZlciB7CmJhY2tncm91bmQtY29sb3I6ICM3MUM2OEE7CmJvcmRlcjogMnB4IHNvbGlkICM3MUM2OEE7Cn0K"},{"version":3,"sources":["Booking.vue"],"names":[],"mappings":";AAiRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Booking.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <!-- Booking confirmation box -->\n    <div class=\"booking-box\">\n    <p style=\"margin-bottom: 60px; font-size: 18px; color: #748FC4 \">Please confirm the following details below</p>\n        <h1 style=\"margin-top: 20px; margin-bottom: -1px;\">{{this.clinicName}}</h1>\n        <h style=\"font-size: 24px;\">{{this.dentist}}</h>\n        <h2>{{this.date}}</h2>\n        <h1>{{this.time}}</h1>\n        <div class=\"book-button\" style=\"margin-top: 50px; color: #748FC4\" @click=\"bookNow\"><h class=\"edit-text\">Book Now</h></div>\n        <button class=\"btn\" @click=\"test\">Test</button> \n    </div>\n</template>\n\n<script>\nimport Home from './Home.vue'\nimport mqtt from '../MQTT'\nimport Swal from 'sweetalert2'\nimport router from '../router'\n\nexport default {\n  components: { Home },\n  data() {\n    return {\n      id: '',\n\n      date: '',\n      clinicName: '',\n      time: '',\n      dentist: '',\n\n      newBooking: '',\n      newDate: '',\n      clinics: '',\n      name: '',\n      address: '',\n\n      bookResult: Boolean,\n      testTime: null\n    }\n  },\n  mounted() {\n    // this.getNames()\n    this.showData()\n  },\n  methods: {\n    test() {\n      let newBooking = {\n        // userId: this.userId,\n        requestId: this.generateId(30),\n        dentistId: +this.dentist.substr(7, 7),\n        issuance: this.generateId(30),\n        date: this.date,\n        time: this.time.substr(1, 5),\n        clinicName: this.clinicName,\n\n        token: localStorage.getItem('loginToken')\n\n      }\n      let user = this.parseJwt(localStorage.loginToken)\n\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n        mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n      \n    },\n    \n    // Get clinic data\n    getNames() {\n      this.clinics = mqtt('getAllC', '/clinics', this.data)\n      setTimeout(() => {\n        this.name = this.clinics[0].data.dentists[0].name\n        this.address = this.clinics[0].data.dentists[0].address\n      }, 1000)\n    },\n    showData() {\n      console.log(this.$route.query)\n      let result = this.$route.query.date\n      this.date = result.substr(0, 10)\n      this.clinicName = this.$route.query.name\n      this.time = this.$route.query.time\n      this.dentist = this.$route.query.dentist\n    },\n\n    // Initiate booking\n    bookNow() {\n      const swalWithBootstrapButtons = Swal.mixin({\n        customClass: {\n          confirmButton: 'btn btn-success',\n          cancelButton: 'btn btn-cancel'\n        },\n        buttonsStyling: true\n      })\n      swalWithBootstrapButtons.fire({\n        text: 'Are you sure you want to book this timeslot?',\n        showCancelButton: true,\n        confirmButtonText: 'Book',\n        cancelButtonText: 'Cancel',\n        cancelButtonColor: 'Red',\n        reverseButtons: true\n      }).then((result) => {\n        if (result.isConfirmed) {\n          this.book()\n          setTimeout(() => {\n            if (this.bookResult === true) {\n              swalWithBootstrapButtons.fire({\n                title: 'Booked',\n                text: 'The time has been booked!',\n                icon: 'success',\n                confirmButtonColor: '#3085d6',\n                confirmButtonText: 'OK',\n              }).then((result) => {\n                if (result.isConfirmed) {\n                  window.location.assign(\"/\")\n                }\n              })\n            } else {\n              swalWithBootstrapButtons.fire({\n                title: 'Unsuccessful',\n                text: 'Something went wrong!',\n                icon:'error',\n                confirmButtonColor: '#3085d6',\n                confirmButtonText: 'OK',\n              }).then((result) => {\n                if (result.isConfirmed) {\n                  window.location.assign(\"/\")\n                }\n              })\n            }\n          }, 1000)\n        } else if (\n          result.dismiss === Swal.DismissReason.cancel\n        ) {\n          swalWithBootstrapButtons.fire({\n            title: 'Cancelled',\n            text: 'Booking is canceled!',\n            icon: 'error',\n            confirmButtonColor: '#3085d6',\n            confirmButtonText: 'OK',\n          }).then((result) => {\n            if (result.isConfirmed) {\n              window.location.assign(\"/\")\n            }\n          })\n        }\n      })\n    },\n    // Create booking ID\n    generateId(length) {\n      let result = ''\n      const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n      const charactersLength = characters.length\n      for (let i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength))\n      }\n      return result\n    },\n    parseJwt(token) {\n      const base64Url = token.split('.')[1]\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/')\n      const jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function (c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\n      }).join(''))\n      let user = JSON.parse(jsonPayload)\n      return user\n\n    },\n    book() {\n      let newBooking = {\n        // userId: this.userId,\n        requestId: this.generateId(30),\n        dentistId: +this.dentist.substr(7,7),\n        issuance:  this.generateId(30),\n        date: this.date,\n        time: this.time.substr(1,5),\n        clinicName: this.clinicName,\n\n        token: localStorage.getItem('loginToken')\n\n      }\n      let user = this.parseJwt(localStorage.loginToken)\n      const result = mqtt('postBookingForUser', `/users/${user._id}/bookings`, newBooking, false)\n      setTimeout(() => {\n        if (result[0].data.bookings) {\n          console.log('succesfull')\n          this.bookResult = true\n        } else if (result[0].data === '401 unauthorized') {\n          localStorage.removeItem('loginToken')\n          setTimeout(() => {\n            console.log('unsuccsesfull')\n            this.bookResult = false\n          }, 1000)\n        } else if (result[0].data.message === \"Sorry, out of service right now\") {\n          alert('Sorry, out of service right now. Please try again in a short while!')\n        }\n         else {\n          console.log('unsuccsesfull')\n          this.bookResult = false\n        }\n        console.log(this.bookResult)\n        // return finalResult\n\n      }, 1000)\n    }\n  }\n}\n\n</script>\n\n<style>\n    .booking-box {\n    margin-top: 3rem;\n    box-sizing: border-box;\n    height: auto;\n    border-radius: 25px;\n    text-align: center;\n    margin-left: 30%;\n    margin-right: 30%;\n    background: #ffffff;\n    padding: 40px;\n    color: #4B6AA7;\n    box-shadow: 4px 10px 10px rgba(143, 145, 190, 0.25);\n    }\n    .book-button {\n    padding: 14px;\n    display:inline-block;\n    text-align: center;\n    margin-top: 1rem;\n    box-sizing: border-box;\n    height: auto;\n    background-color: #748FC4;\n    color: #ffffff;\n    border-radius: 23px;\n    cursor: pointer;\n    border: 2px solid #748FC4;\n    box-shadow: 0px 4px 4px rgba(143, 145, 190, 0.25);\n    }\n    .edit-text {\n    color: #ffffff;\n    }\n    .book-button:hover {\n    background-color: #71C68A;\n    border: 2px solid #71C68A;\n    }\n</style>\n"]}]}
{"remainingRequest":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aminmahmoudi/Desktop/DIT356/client 2/client/src/views/Home.vue?vue&type=style&index=0&id=fae5bece&lang=css&","dependencies":[{"path":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/src/views/Home.vue","mtime":1670515962005},{"path":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1655715156000},{"path":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/node_modules/vue-loader/lib/index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jbGluaWMtYm94IHsKICAgIGhlaWdodDogYXV0bzsKICAgIG1hcmdpbi10b3A6IDE1cHg7CiAgICBwYWRkaW5nLXRvcDogMTFweDsKICB3aWR0aDogNTAwcHg7CiAgY29sb3I6Izc0OEZDNDsKICBiYWNrZ3JvdW5kOiAjZmZmZmZmOwogIG1hcmdpbi1sZWZ0OiA3MHB4OwogIGJvcmRlci1yYWRpdXM6IDEwcHggMTBweCAxMHB4IDEwcHg7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICBib3gtc2hhZG93OiAwcHggNHB4IDRweCByZ2JhKDE0MywgMTQ1LCAxOTAsIDAuMjUpOwogIHBhZGRpbmctYm90dG9tOiAzcHg7Cn0KCi5saXN0LW9mLWNvdXJzZXMtbGkgewogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICBtYXJnaW46IDI1cHg7Cgp9CiNib29raW5nIHsKICBkaXNwbGF5OiBmbGV4OwogICAgZmxleC1kaXJlY3Rpb246IHJvdzsKICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwoKfQoudGFicyB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgZmxleC1kaXJlY3Rpb246IHJvdzsKICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgY3Vyc29yOiBwb2ludGVyOwp9Ci5tYXB7CiAgICBtYXJnaW4tdG9wOiA1JTsKICAgIG1hcmdpbi1sZWZ0OiAtNTAlOwp9Ci5tYXAtdGV4dHsKICAgIG1hcmdpbi10b3A6IDMlOwogICAgZm9udC1zaXplOiAzMHB4Owp9Ci5taWRkbGUtcGFydCB7CiAgICBtYXJnaW4tbGVmdDogMzAlOwp9Ci5lbXB0eS1ib3ggewogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IAogIHdpZHRoOiAxMDAlOwogIG1hcmdpbi1ib3R0b206IDE1MHB4OwogIG1hcmdpbi10b3A6IDE1MHB4Owp9Cg=="},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";AAuVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <div class=\"map-body\">\n     <p style=\"color: #748FC4;\" class=\"map-text\">FIND THE LOCATION OF YOUR CLINIC AND BOOK AN APPOINTMENT.</p>\n    </div>\n    <div style=\"margin-top: -50px\" class=\"middle-part\">\n     <div class=\"map\" style=\"display: inline-block;\">\n      <mapField></mapField>\n     </div>\n     <div style=\"display: inline-block; vertical-align: top; margin-top: 75px;\" v-for=\"clinic in clinics\" v-bind:key=\"clinic._id\" >\n        <clinicSlot v-bind:clinic=\"clinic\" v-on:book-slot=\"startBooking\"/>\n    </div>\n      \n    </div>\n\n    <div id=\"booking\">\n    \n      <div class=\"tabs\">\n        <TabNav :tabs=\"this.tabs\" :selected=\"selected\" @selected=\"setSelected\">\n          <Tab :isSelected=\"selected === 'Dentist1'\">\n              <ul class=\"list-of-courses-ul\">\n                <li class=\"list-of-courses-li\" v-for=\"slot in dL1\" v-bind:key=\"slot\">\n                 <button \n                 @click=\"webcamSendRequestButton($event)\"\n                 :value=\"slot\">\n                 {{ slot }}</button>\n                </li>\n              </ul>\n          </Tab>\n          <Tab :isSelected=\"selected === 'Dentist2'\">\n              <ul class=\"list-of-courses-ul\">\n                <li class=\"list-of-courses-li\" v-for=\"slot in dL2\" v-bind:key=\"slot\">\n                 <button\n                 @click=\"webcamSendRequestButton($event)\"\n                 :value=\"slot\">\n                 {{ slot }}</button>\n                </li>\n              </ul>\n          </Tab>\n          <Tab :isSelected=\"selected === 'Dentist3'\">\n              <ul class=\"list-of-courses-ul\">\n                <li class=\"list-of-courses-li\" v-for=\"slot in dL3\" v-bind:key=\"slot\">\n                 <button\n                 @click=\"webcamSendRequestButton($event)\"\n                 :value=\"slot\">\n                 {{ slot }}</button>\n                </li>\n              </ul>\n          </Tab>\n        </TabNav>\n\n      </div>\n\n      <div>\n        <DatePicker\n        v-model=\"date\"\n        mode=\"date\"\n        is-inline\n        title-position=\"left\"\n        :is-expanded=\"$screens({ default: true, lg: false })\"\n        :attributes='attributes'\n        @dayclick='dayClicked'\n      />\n      </div>\n\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport TabNav from '../components/TabNav.vue'\nimport Tab from '../components/Tab.vue'\nimport clinicSlot from '../components/ClinicSlots.vue'\nimport mapField from '../components/Map.vue'\nimport { Calendar, DatePicker } from 'v-calendar';\nimport mqtt from '../MQTT'\nimport router from '../router'\n\nexport default {\n  name: 'home',\n  props: ['home'],\n  components: { TabNav, Tab, clinicSlot, mapField, Calendar, DatePicker},\n  mounted() {\n    this.getClinics();\n  },\n  data() {\n    return {\n      dL1: [],\n      Dentist1: [],\n      dL2: [],\n      dL3: [],\n      tabs: [],\n      selected: \"Dentist1\",\n      message: 'none',\n      date: new Date(),\n      selectedDay: new Date(),\n      clinics: '',\n      clinicName: '',\n\n      fulls: [\n        {\n          id: 1,\n          description: 'No Vacancy',\n          date: new Date(2022, 11, 15),\n          isCompleted: false,\n          color: 'red'\n        },\n        {\n          id: 1,\n          description: 'No Vacancy',\n          date: new Date(2022, 11, 12),\n          isCompleted: false,\n          color: 'red'\n        },\n        {\n          id: 1,\n          description: 'Holiday',\n          date: new Date(2022, 11, 24),\n          isCompleted: false,\n          color: 'red'\n        },\n      ]\n    }\n  },\n  computed: {\n    attributes() {\n      return this.fulls.map(f => ({\n        key: `full.${f.id}`,\n        highlight: \"red\",\n        dates: f.date,\n        customData: f,\n        popover: {\n          label: f.description,\n          visibility: 'focus',\n          hideIndicator: true,\n        }\n      }));\n    }\n  },\n  watch: {\n    selectedDay(newValue, oldValue) {\n      console.log(this.clinicName)\n      this.startBooking(this.clinicName)\n    }\n  },\n  methods: {\n    webcamSendRequestButton(e) {\n     if (!this.selectedDay.date) {\n      console.log(this.selectedDay)\n      let date = new Date(this.selectedDay)\n      date = date.toISOString().replace('.000Z', '')\n      router.push({ path: '/booking', query: { name: this.clinicName, date: date, time: e.target.textContent, dentist: this.selected} })\n     } else {\n      console.log(this.selectedDay.id)\n      //let date = new Date(this.selectedDay.date)\n      //date = date.toISOString().replace('.000Z', '')\n      router.push({ path: '/booking', query: { name: this.clinicName, date: this.selectedDay.id, time: e.target.textContent, dentist: this.selected} })\n     }\n\n  },\n    setSelected(Tab) {\n      this.selected = Tab\n    },\n    startBooking(name) {\n      let dateStr\n      let date \n      let array\n      let day\n      console.log(this.selectedDay)\n\n      if (!this.selectedDay.date) {\n        dateStr = this.selectedDay\n        console.log(dateStr.getUTCDay())\n        date = new Date(dateStr).toISOString()\n        day = dateStr.getUTCDay()\n\n      } else {\n        dateStr = this.selectedDay.date\n        console.log(dateStr)\n        date = new Date(dateStr).toISOString()\n        array = this.selectedDay.ariaLabel.split(',')\n        day = array[0]\n      }\n      document.getElementById('booking').scrollIntoView({\n        behavior: \"smooth\"\n      });\n      this.clinicName = name\n      let result = this.getTimeStops(day, name)\n      setTimeout(() => {\n        this.removeBooked(date, result)\n      }, 1000)\n\n\n    },\n    getClinics() {\n      let response = mqtt('getAllC', '/clinics', this.data)\n      setTimeout(() => {\n        this.clinics = response[0].data.dentists\n        console.log(this.clinics)\n      }, 1000)\n    },\n    dayClicked(day) {\n      this.selectedDay = day;\n      console.log(this.selectedDay)\n      console.log(this.selectedDay.date)\n    },\n    /*\n    getResultSlots: function () {\n      const day = new Date().getDay()\n      let result = this.getTimeStops(day, 'Tooth Fairy Dentist')\n      setTimeout(() => {\n        this.removeBooked('2020-01-08T00:00:00.000+00:00', result)\n      }, 1000)\n    },\n    */\n    removeBooked: function (date, list) {\n      const data = {}\n      //date = '2020-01-08T00:00:00.000Z'\n      let result = mqtt('getBookings', '/bookings', data)\n      setTimeout(() => {\n        let bookings = result[0].data.bookings\n        console.log(bookings)\n        let size = bookings.length \n        let indexL = []\n        for (let i = size - 1; i >= 0; i--) {\n          if (bookings[i].date != date) {\n            bookings.splice(i, 1)\n          }\n        }\n        for (let i = 0; i < bookings.length; i++) {\n        if (bookings[i].dentistId === 1) {\n          this.dL1 = list[0]\n          const index = this.dL1.indexOf(bookings[i].time)\n          this.dL1.splice(index, 1)\n        } else if (bookings[i].dentistId === 2) {\n          this.dL2 = list[1]\n          const index = this.dL2.indexOf(bookings[i].time)\n          this.dL2.splice(index, 1)\n        } else if (bookings[i].dentistId === 3) {\n          this.dL3 = list[2]\n          const index = this.dL3.indexOf(bookings[i].time)\n          this.dL3.splice(index, 1)\n        }\n      }\n      }, 1000)\n    },\n    book: function () {\n      this.newBooking = {\n        userId: this.userId,\n        requestId: this.requestId,\n        dentistId: this.dentistId,\n        issuance: this.issuance,\n        date: this.newDate\n      }\n      const result = mqtt('book', '/bookings', this.newBooking)\n      setTimeout(() => {\n        console.log(result)\n        if (result.status === 201) {\n          console.log('succesfull')\n        } else {\n          console.log('unsuccsesfull')\n        }\n      }, 1000)\n    },\n\n    getTimeStops: function (day, clinic) {\n      console.log(day, clinic)\n      const clinics = mqtt('getAllC', '/clinics', this.data)\n      let start\n      let end\n      let openingHours\n      this.clinicName = clinic\n      // the timeslots of each day\n      const finalSlots = []\n      setTimeout(() => {\n        console.log(clinics)\n        const resultClinic = clinics[0].data.dentists\n        console.log(resultClinic)\n        for (let i = 3; i >= 0; i--) {\n          if (resultClinic[i].name !== clinic) {\n            resultClinic.splice(i, 1)\n          }\n        }\n        if (day === 'Monday' || day === 0) {\n          openingHours = resultClinic[0].openinghours[0].monday\n        } else\n        if (day === 'Tuesday' || day === 1) {\n          openingHours = resultClinic[0].openinghours[1].tuesday\n        } else\n        if (day === 'Wednesday' || day === 2) {\n          openingHours = resultClinic[0].openinghours[2].wednesday\n        } else\n        if (day === 'Thursday' || day === 3) {\n          openingHours = resultClinic[0].openinghours[3].thursday\n        } else\n        if (day === 'Friday' || day === 4) {\n          openingHours = resultClinic[0].openinghours[4].friday\n        }\n        const timeStops = []\n        const array = openingHours.split('-')\n        start = array[0]\n        end = array[1]\n        let startTime = moment(start, 'HH:mm')\n        const endTime = moment(end, 'HH:mm')\n        const breakS = '12:00'\n        const breakE = '13:30'\n        let breakStart = moment(breakS, 'HH:mm')\n        const breakEnd = moment(breakE, 'HH:mm')\n        if (endTime.isBefore(startTime)) {\n          endTime.add(1, 'day')\n        }\n        while (startTime <= endTime) {\n          timeStops.push((new moment(startTime).format('HH:mm')))\n          startTime = startTime.add(30, 'minutes')\n        }\n        while (breakStart < breakEnd) {\n          const index = timeStops.indexOf((new moment(breakStart).format('HH:mm')))\n          if (index > -1) {\n            timeStops.splice(index, 1)\n          }\n          breakStart = breakStart.add(30, 'minutes')\n        }\n        this.tabs = []\n        for (let j = 0; j < resultClinic[0].dentists; j++) {\n          let tab = 'Dentist' + (j+1)\n          this.tabs.push(tab)\n          this.tab = timeStops\n          console.log(this.Dentist1)\n          this.dL1 = timeStops\n          this.dL2 = timeStops\n          this.dL3 = timeStops \n          finalSlots.push(timeStops)\n        }\n        console.log(finalSlots)\n      }, 1000)\n      return finalSlots\n    }\n  }\n}\n</script>\n\n<style>\n.clinic-box {\n    height: auto;\n    margin-top: 15px;\n    padding-top: 11px;\n  width: 500px;\n  color:#748FC4;\n  background: #ffffff;\n  margin-left: 70px;\n  border-radius: 10px 10px 10px 10px;\n  box-sizing: border-box;\n  box-shadow: 0px 4px 4px rgba(143, 145, 190, 0.25);\n  padding-bottom: 3px;\n}\n\n.list-of-courses-li {\n  display: inline-block;\n  margin: 25px;\n\n}\n#booking {\n  display: flex;\n    flex-direction: row;\n    justify-content: center;\n\n}\n.tabs {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    cursor: pointer;\n}\n.map{\n    margin-top: 5%;\n    margin-left: -50%;\n}\n.map-text{\n    margin-top: 3%;\n    font-size: 30px;\n}\n.middle-part {\n    margin-left: 30%;\n}\n.empty-box {\n  box-sizing: border-box; \n  width: 100%;\n  margin-bottom: 150px;\n  margin-top: 150px;\n}\n</style>\n"]}]}
{"remainingRequest":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aminmahmoudi/Desktop/DIT356/client 2/client/src/views/TimeSlot.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/src/views/TimeSlot.vue","mtime":1670321632895},{"path":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/aminmahmoudi/Desktop/DIT356/client 2/client/node_modules/vue-loader/lib/index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBtcXR0IGZyb20gJy4uL01RVFQnCmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JwpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGlkOiAnJywKICAgICAgZGF0ZTogJycsCiAgICAgIG5ld0Jvb2tpbmc6ICcnLAogICAgICBuZXdEYXRlOiAnJywKICAgICAgY2xpbmljSW5mbzogJycsCiAgICAgIG9wZW5pbmdIb3VyczogW10sCiAgICAgIGNsaW5pY3M6IHt9LAogICAgICBkYXRhOiB7IG1lc3NhZ2U6ICdIZWxsbycgfSwKICAgICAgbmV3Q2xpbmljOiAnJwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgYWRkQ2xpbmljOiBmdW5jdGlvbiAoKSB7CiAgICAgIHRoaXMubmV3Q2xpbmljID0gewogICAgICAgIGlkOiAnMScsCiAgICAgICAgbmFtZTogJ1lvdXIgRGVudGlzdCcsCiAgICAgICAgb3duZXI6ICdEYW4gVGlzdCcsCiAgICAgICAgZGVudGlzdHM6IDMsCiAgICAgICAgYWRkcmVzczogJ1NwYW5ubcOlbHNnYXRhbiAyMCcsCiAgICAgICAgY2l0eTogJ0dvdGhlbmJ1cmcnLAogICAgICAgIGNvb3JkaW5hdGU6IFsKICAgICAgICAgIHsgbG9uZ2l0dWRlOiAxMS45NjkzODggfSwKICAgICAgICAgIHsgbGF0aXR1ZGU6IDU3LjcwNzYxOSB9CiAgICAgICAgXSwKICAgICAgICBvcGVuaW5naG91cnM6IFsKICAgICAgICAgIHsgbW9uZGF5OiAnOTowMC0xNzowMCcgfSwKICAgICAgICAgIHsgdHVlc2RheTogJzg6MDAtMTc6MDAnIH0sCiAgICAgICAgICB7IHdlZG5lc2RheTogJzc6MDAtMTY6MDAnIH0sCiAgICAgICAgICB7IHRodXJzZGF5OiAnOTowMC0xNzowMCcgfSwKICAgICAgICAgIHsgZnJpZGF5OiAnOTowMC0xNTowMCcgfQogICAgICAgIF0KICAgICAgfQogICAgICBjb25zdCByZXN1bHQgPSBtcXR0KCdwb3N0QycsICcvY2xpbmljcycsIHRoaXMubmV3Q2xpbmljKQogICAgICBjb25zb2xlLmxvZyhyZXN1bHQpCiAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSAyMDApIHsKICAgICAgICBjb25zb2xlLmxvZygnc3VjY2VzZnVsbCcpCiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS5sb2coJ3Vuc3VjY3Nlc2Z1bGwnKQogICAgICB9CiAgICB9LAogICAgYm9vazogZnVuY3Rpb24gKCkgewogICAgICB0aGlzLm5ld0Jvb2tpbmcgPSB7CiAgICAgICAgdXNlcklkOiB0aGlzLnVzZXJJZCwKICAgICAgICByZXF1ZXN0SWQ6IHRoaXMucmVxdWVzdElkLAogICAgICAgIGRlbnRpc3RJZDogdGhpcy5kZW50aXN0SWQsCiAgICAgICAgaXNzdWFuY2U6IHRoaXMuaXNzdWFuY2UsCiAgICAgICAgZGF0ZTogdGhpcy5uZXdEYXRlCgogICAgICB9CiAgICAgIGNvbnN0IHJlc3VsdCA9IG1xdHQoJ2Jvb2snLCAnL2Jvb2tpbmdzJywgdGhpcy5uZXdCb29raW5nKQogICAgICBjb25zb2xlLmxvZyhyZXN1bHQpCiAgICAgIGlmIChyZXN1bHQuc3RhdHVzID09PSAyMDApIHsKICAgICAgICBjb25zb2xlLmxvZygnc3VjY2VzZnVsbCcpCiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS5sb2coJ3Vuc3VjY3Nlc2Z1bGwnKQogICAgICB9CiAgICB9LAogICAgZ2V0VGltZVN0b3BzOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBjbGluaWNzID0gbXF0dCgnZ2V0QWxsQycsICcvY2xpbmljcycsIHRoaXMuZGF0YSkKICAgICAgY29uc29sZS5sb2coY2xpbmljcykKICAgICAgbGV0IHN0YXJ0CiAgICAgIGxldCBlbmQKICAgICAgdmFyIHRpbWVTdG9wcyA9IFtdCiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7CiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPD0gNDsgaisrKSB7CiAgICAgICAgICBpZiAoaiA9PT0gMCkgewogICAgICAgICAgICBjb25zdCBvcGVuaW5nSG91cnMgPSBjbGluaWNzLmRlbnRpc3RzW2ldLm9wZW5pbmdob3Vycy5tb25kYXkKICAgICAgICAgICAgY29uc3QgYXJyYXkgPSBvcGVuaW5nSG91cnMuc3BsaXQoJy0nKQogICAgICAgICAgICBzdGFydCA9IGFycmF5WzBdCiAgICAgICAgICAgIGVuZCA9IGFycmF5WzFdCiAgICAgICAgICAgIGxldCBzdGFydFRpbWUgPSBtb21lbnQoc3RhcnQsICdISDptbScpCiAgICAgICAgICAgIGNvbnN0IGVuZFRpbWUgPSBtb21lbnQoZW5kLCAnSEg6bW0nKQogICAgICAgICAgICBpZiAoZW5kVGltZS5pc0JlZm9yZShzdGFydFRpbWUpKSB7CiAgICAgICAgICAgICAgZW5kVGltZS5hZGQoMSwgJ2RheScpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgd2hpbGUgKHN0YXJ0VGltZSA8PSBlbmRUaW1lKSB7CiAgICAgICAgICAgICAgdGltZVN0b3BzLnB1c2gobmV3IG1vbWVudChzdGFydFRpbWUpLmZvcm1hdCgnSEg6bW0nKSkKICAgICAgICAgICAgICBzdGFydFRpbWUgPSBzdGFydFRpbWUuYWRkKDMwLCAnbWludXRlcycpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZQogICAgICAgICAgaWYgKGogPT09IDEpIHsKICAgICAgICAgICAgY29uc3Qgb3BlbmluZ0hvdXJzID0gY2xpbmljcy5kZW50aXN0c1tpXS5vcGVuaW5naG91cnMudHVlc2RheQogICAgICAgICAgICBjb25zdCBhcnJheSA9IG9wZW5pbmdIb3Vycy5zcGxpdCgnLScpCiAgICAgICAgICAgIHN0YXJ0ID0gYXJyYXlbMF0KICAgICAgICAgICAgZW5kID0gYXJyYXlbMV0KICAgICAgICAgICAgbGV0IHN0YXJ0VGltZSA9IG1vbWVudChzdGFydCwgJ0hIOm1tJykKICAgICAgICAgICAgY29uc3QgZW5kVGltZSA9IG1vbWVudChlbmQsICdISDptbScpCiAgICAgICAgICAgIGlmIChlbmRUaW1lLmlzQmVmb3JlKHN0YXJ0VGltZSkpIHsKICAgICAgICAgICAgICBlbmRUaW1lLmFkZCgxLCAnZGF5JykKICAgICAgICAgICAgfQogICAgICAgICAgICB3aGlsZSAoc3RhcnRUaW1lIDw9IGVuZFRpbWUpIHsKICAgICAgICAgICAgICB0aW1lU3RvcHMucHVzaChuZXcgbW9tZW50KHN0YXJ0VGltZSkuZm9ybWF0KCdISDptbScpKQogICAgICAgICAgICAgIHN0YXJ0VGltZSA9IHN0YXJ0VGltZS5hZGQoMzAsICdtaW51dGVzJykKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlCiAgICAgICAgICBpZiAoaiA9PT0gMikgewogICAgICAgICAgICBjb25zdCBvcGVuaW5nSG91cnMgPSBjbGluaWNzLmRlbnRpc3RzW2ldLm9wZW5pbmdob3Vycy53ZWRuZXNkYXkKICAgICAgICAgICAgY29uc3QgYXJyYXkgPSBvcGVuaW5nSG91cnMuc3BsaXQoJy0nKQogICAgICAgICAgICBzdGFydCA9IGFycmF5WzBdCiAgICAgICAgICAgIGVuZCA9IGFycmF5WzFdCiAgICAgICAgICAgIGxldCBzdGFydFRpbWUgPSBtb21lbnQoc3RhcnQsICdISDptbScpCiAgICAgICAgICAgIGNvbnN0IGVuZFRpbWUgPSBtb21lbnQoZW5kLCAnSEg6bW0nKQogICAgICAgICAgICBpZiAoZW5kVGltZS5pc0JlZm9yZShzdGFydFRpbWUpKSB7CiAgICAgICAgICAgICAgZW5kVGltZS5hZGQoMSwgJ2RheScpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgd2hpbGUgKHN0YXJ0VGltZSA8PSBlbmRUaW1lKSB7CiAgICAgICAgICAgICAgdGltZVN0b3BzLnB1c2gobmV3IG1vbWVudChzdGFydFRpbWUpLmZvcm1hdCgnSEg6bW0nKSkKICAgICAgICAgICAgICBzdGFydFRpbWUgPSBzdGFydFRpbWUuYWRkKDMwLCAnbWludXRlcycpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZQogICAgICAgICAgaWYgKGogPT09IDMpIHsKICAgICAgICAgICAgY29uc3Qgb3BlbmluZ0hvdXJzID0gY2xpbmljcy5kZW50aXN0c1tpXS5vcGVuaW5naG91cnMudGh1cnNkYXkKICAgICAgICAgICAgY29uc3QgYXJyYXkgPSBvcGVuaW5nSG91cnMuc3BsaXQoJy0nKQogICAgICAgICAgICBzdGFydCA9IGFycmF5WzBdCiAgICAgICAgICAgIGVuZCA9IGFycmF5WzFdCiAgICAgICAgICAgIGxldCBzdGFydFRpbWUgPSBtb21lbnQoc3RhcnQsICdISDptbScpCiAgICAgICAgICAgIGNvbnN0IGVuZFRpbWUgPSBtb21lbnQoZW5kLCAnSEg6bW0nKQogICAgICAgICAgICBpZiAoZW5kVGltZS5pc0JlZm9yZShzdGFydFRpbWUpKSB7CiAgICAgICAgICAgICAgZW5kVGltZS5hZGQoMSwgJ2RheScpCiAgICAgICAgICAgIH0KICAgICAgICAgICAgd2hpbGUgKHN0YXJ0VGltZSA8PSBlbmRUaW1lKSB7CiAgICAgICAgICAgICAgdGltZVN0b3BzLnB1c2gobmV3IG1vbWVudChzdGFydFRpbWUpLmZvcm1hdCgnSEg6bW0nKSkKICAgICAgICAgICAgICBzdGFydFRpbWUgPSBzdGFydFRpbWUuYWRkKDMwLCAnbWludXRlcycpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZQogICAgICAgICAgaWYgKGogPT09IDQpIHsKICAgICAgICAgICAgY29uc3Qgb3BlbmluZ0hvdXJzID0gY2xpbmljcy5kZW50aXN0c1tpXS5vcGVuaW5naG91cnMuZnJpZGF5CiAgICAgICAgICAgIGNvbnN0IGFycmF5ID0gb3BlbmluZ0hvdXJzLnNwbGl0KCctJykKICAgICAgICAgICAgc3RhcnQgPSBhcnJheVswXQogICAgICAgICAgICBlbmQgPSBhcnJheVsxXQogICAgICAgICAgICBsZXQgc3RhcnRUaW1lID0gbW9tZW50KHN0YXJ0LCAnSEg6bW0nKQogICAgICAgICAgICBjb25zdCBlbmRUaW1lID0gbW9tZW50KGVuZCwgJ0hIOm1tJykKICAgICAgICAgICAgaWYgKGVuZFRpbWUuaXNCZWZvcmUoc3RhcnRUaW1lKSkgewogICAgICAgICAgICAgIGVuZFRpbWUuYWRkKDEsICdkYXknKQogICAgICAgICAgICB9CiAgICAgICAgICAgIHdoaWxlIChzdGFydFRpbWUgPD0gZW5kVGltZSkgewogICAgICAgICAgICAgIHRpbWVTdG9wcy5wdXNoKG5ldyBtb21lbnQoc3RhcnRUaW1lKS5mb3JtYXQoJ0hIOm1tJykpCiAgICAgICAgICAgICAgc3RhcnRUaW1lID0gc3RhcnRUaW1lLmFkZCgzMCwgJ21pbnV0ZXMnKQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGNvbnNvbGUubG9nKHRpbWVTdG9wcykKICAgICAgcmV0dXJuIHRpbWVTdG9wcwogICAgfSwKICAgIGdldENsaW5pY3M6IGZ1bmN0aW9uICgpIHsKICAgICAgdGhpcy5jbGluaWNzID0gbXF0dCgnZ2V0QWxsQycsICcvY2xpbmljcycsIHRoaXMuZGF0YSkKICAgIH0KICB9Cn0K"},{"version":3,"sources":["TimeSlot.vue"],"names":[],"mappings":";AAyfile":"TimeSlot.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div>\n        <form>\n        <input\n        placeholder=\"userId\"\n        v-model=\"userId\"\n        />\n        <input\n        placeholder=\"requestId\"\n        v-model=\"requestId\"\n        />\n        <input\n        placeholder=\"dentistId\"\n        v-model=\"dentistId\"\n        />\n        <input\n        placeholder=\"issuance\"\n        v-model=\"issuance\"\n        />\n        <input\n        placeholder=\"date\"\n        v-model=\"date\"\n        />\n        <input\n        placeholder=\"clinic id\"\n        v-model=\"id\"\n        />\n    </form>\n    <button class=\"generateTime\" @click=\"getTimeStops()\">Generate Time</button>\n    <button class=\"addClinic\" @click=\"addClinic()\">Add clinic</button>\n    <div>\n       {{newDate}}\n    </div>\n    <div>\n      {{newBooking}}\n    </div>\n    <button class=\"book\" @click=\"book\">Book</button>\n    </div>\n\n</template>\n<script>\nimport mqtt from '../MQTT'\nimport moment from 'moment'\nexport default {\n  data() {\n    return {\n      id: '',\n      date: '',\n      newBooking: '',\n      newDate: '',\n      clinicInfo: '',\n      openingHours: [],\n      clinics: {},\n      data: { message: 'Hello' },\n      newClinic: ''\n    }\n  },\n  methods: {\n    addClinic: function () {\n      this.newClinic = {\n        id: '1',\n        name: 'Your Dentist',\n        owner: 'Dan Tist',\n        dentists: 3,\n        address: 'Spannm√•lsgatan 20',\n        city: 'Gothenburg',\n        coordinate: [\n          { longitude: 11.969388 },\n          { latitude: 57.707619 }\n        ],\n        openinghours: [\n          { monday: '9:00-17:00' },\n          { tuesday: '8:00-17:00' },\n          { wednesday: '7:00-16:00' },\n          { thursday: '9:00-17:00' },\n          { friday: '9:00-15:00' }\n        ]\n      }\n      const result = mqtt('postC', '/clinics', this.newClinic)\n      console.log(result)\n      if (result.status === 200) {\n        console.log('succesfull')\n      } else {\n        console.log('unsuccsesfull')\n      }\n    },\n    book: function () {\n      this.newBooking = {\n        userId: this.userId,\n        requestId: this.requestId,\n        dentistId: this.dentistId,\n        issuance: this.issuance,\n        date: this.newDate\n\n      }\n      const result = mqtt('book', '/bookings', this.newBooking)\n      console.log(result)\n      if (result.status === 200) {\n        console.log('succesfull')\n      } else {\n        console.log('unsuccsesfull')\n      }\n    },\n    getTimeStops: function () {\n      var clinics = mqtt('getAllC', '/clinics', this.data)\n      console.log(clinics)\n      let start\n      let end\n      var timeStops = []\n      for (let i = 0; i < 4; i++) {\n        for (let j = 0; j <= 4; j++) {\n          if (j === 0) {\n            const openingHours = clinics.dentists[i].openinghours.monday\n            const array = openingHours.split('-')\n            start = array[0]\n            end = array[1]\n            let startTime = moment(start, 'HH:mm')\n            const endTime = moment(end, 'HH:mm')\n            if (endTime.isBefore(startTime)) {\n              endTime.add(1, 'day')\n            }\n            while (startTime <= endTime) {\n              timeStops.push(new moment(startTime).format('HH:mm'))\n              startTime = startTime.add(30, 'minutes')\n            }\n          } else\n          if (j === 1) {\n            const openingHours = clinics.dentists[i].openinghours.tuesday\n            const array = openingHours.split('-')\n            start = array[0]\n            end = array[1]\n            let startTime = moment(start, 'HH:mm')\n            const endTime = moment(end, 'HH:mm')\n            if (endTime.isBefore(startTime)) {\n              endTime.add(1, 'day')\n            }\n            while (startTime <= endTime) {\n              timeStops.push(new moment(startTime).format('HH:mm'))\n              startTime = startTime.add(30, 'minutes')\n            }\n          } else\n          if (j === 2) {\n            const openingHours = clinics.dentists[i].openinghours.wednesday\n            const array = openingHours.split('-')\n            start = array[0]\n            end = array[1]\n            let startTime = moment(start, 'HH:mm')\n            const endTime = moment(end, 'HH:mm')\n            if (endTime.isBefore(startTime)) {\n              endTime.add(1, 'day')\n            }\n            while (startTime <= endTime) {\n              timeStops.push(new moment(startTime).format('HH:mm'))\n              startTime = startTime.add(30, 'minutes')\n            }\n          } else\n          if (j === 3) {\n            const openingHours = clinics.dentists[i].openinghours.thursday\n            const array = openingHours.split('-')\n            start = array[0]\n            end = array[1]\n            let startTime = moment(start, 'HH:mm')\n            const endTime = moment(end, 'HH:mm')\n            if (endTime.isBefore(startTime)) {\n              endTime.add(1, 'day')\n            }\n            while (startTime <= endTime) {\n              timeStops.push(new moment(startTime).format('HH:mm'))\n              startTime = startTime.add(30, 'minutes')\n            }\n          } else\n          if (j === 4) {\n            const openingHours = clinics.dentists[i].openinghours.friday\n            const array = openingHours.split('-')\n            start = array[0]\n            end = array[1]\n            let startTime = moment(start, 'HH:mm')\n            const endTime = moment(end, 'HH:mm')\n            if (endTime.isBefore(startTime)) {\n              endTime.add(1, 'day')\n            }\n            while (startTime <= endTime) {\n              timeStops.push(new moment(startTime).format('HH:mm'))\n              startTime = startTime.add(30, 'minutes')\n            }\n          }\n        }\n      }\n      console.log(timeStops)\n      return timeStops\n    },\n    getClinics: function () {\n      this.clinics = mqtt('getAllC', '/clinics', this.data)\n    }\n  }\n}\n</script>\n"]}]}